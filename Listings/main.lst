C51 COMPILER V9.60.7.0   MAIN                                                              08/12/2023 11:38:12 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <STC89C5xRC.H>
   2          #include <stdio.h>
   3          #include <math.h>
   4          #include "spwmData.h"
   5          #include "ADC0804.h"
   6          
   7          #define STAT1 P00
   8          #define STAT2 P01
   9          
  10          float spwmDataDivider = 1, frequency;
  11          unsigned int triwave = 20, spwmIndex, polarFlag, triwaveFlag, spwmIndexStep;
  12          unsigned char adc;
  13          
  14          /*
  15              triwave -- triangle wave
  16              spwmIndex -- index of spwm data array
  17              polarFlag -- output polarity flag
  18              triwaveFlag -- triangle wave increment/decrement flag
  19              spwmIndexStep -- spwm array index increment step for frequency
  20              spwmDataDivider -- voltage
  21          */
  22          void Timer0_Init(void)          //50微秒@11.0592MHz
  23          {
  24   1              AUXR &= 0x7F;                   //定时器时钟12T模式
  25   1              TMOD &= 0xF0;                   //设置定时器模式
  26   1              TMOD |= 0x01;                   //设置定时器模式
  27   1              TL0 = 0x00;                             //设置定时初始值
  28   1              TH0 = 0xEE;                             //设置定时初始值
  29   1              TF0 = 0;                                //清除TF0标志
  30   1              TR0 = 1;                                //定时器0开始计时
  31   1          
  32   1          EA = 1;
  33   1          ET0 = 1;
  34   1      }
  35          
  36          
  37          void spwm_routine() interrupt 1 {
  38   1          TL0 = 0x00;                         //设置定时初始值
  39   1              TH0 = 0xEE;                             //设置定时初始值
  40   1          
  41   1          if(spwmIndex > 99) { // change the output polarity flag
  42   2              spwmIndex = 0;
  43   2              polarFlag = !polarFlag;
  44   2          }
  45   1          
  46   1          if(triwave == 100) // change the triangle wave increment/decrement flag
  47   1              triwaveFlag = 0;
  48   1          if(triwave == 0)
  49   1              triwaveFlag = 1;
  50   1          
  51   1          if(!polarFlag) { // output 1
  52   2              if(spwm[spwmIndex] / spwmDataDivider > triwave) {
  53   3                  STAT2 = 0; //off
  54   3                  // delay(1); // dead time
C51 COMPILER V9.60.7.0   MAIN                                                              08/12/2023 11:38:12 PAGE 2   

  55   3                  STAT1 = 1; // on
  56   3              } else {
  57   3                  STAT1 = 0;
  58   3                  // delay(1);
  59   3                  STAT2 = 0;
  60   3              }
  61   2          }
  62   1          if(polarFlag) { // output 2
  63   2              if(spwm[spwmIndex] / spwmDataDivider > triwave) {
  64   3                  STAT1 = 0;
  65   3                  // delay(1);
  66   3                  STAT2 = 1;
  67   3              } else {
  68   3                  STAT1 = 0;
  69   3                  // delay(1);
  70   3                  STAT2 = 0;
  71   3              }
  72   2          }
  73   1          
  74   1          if(triwaveFlag == 1) // increment of triangle wave
  75   1              triwave += 20;
  76   1          if(triwaveFlag == 0)
  77   1              triwave -= 20; // decrement of triangle wave
  78   1          
  79   1          spwmIndex += spwmIndexStep; // increase spwm data index by the length of step variable
  80   1          
  81   1          adc = ADCRead();
  82   1          frequency = (float)adc/225;
  83   1          if(adc >= 0 && adc <= 255) {
  84   2              spwmIndexStep = frequency*40 + 10;  //10 - 50
  85   2          }
  86   1          return;
  87   1      }
  88          
  89          void main() {
  90   1          Timer0_Init();
  91   1          spwmDataDivider = 1;
  92   1          spwmIndexStep = 10;
  93   1          while(1);
  94   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    457    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     19    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
